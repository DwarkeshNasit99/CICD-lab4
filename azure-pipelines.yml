trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  functionAppName: 'myAzureFunctionApp'  # Replace with your actual Function App name

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build the Function App'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
      displayName: 'Install .NET 6 SDK'
    
    - script: |
        dotnet restore
      displayName: 'Restore NuGet packages'
    
    - script: |
        dotnet build --configuration $(buildConfiguration) --no-restore
      displayName: 'Build the Azure Function'
    
    - script: |
        dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish
      displayName: 'Publish Function App'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Create deployment package'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish artifacts'

- stage: Test
  displayName: 'Test Stage'
  dependsOn: Build
  jobs:
  - job: Test
    displayName: 'Run Unit Tests'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
      displayName: 'Install .NET 6 SDK'
    
    - script: |
        dotnet restore
      displayName: 'Restore NuGet packages'
    
    - script: |
        dotnet test --configuration $(buildConfiguration) --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory $(Agent.TempDirectory)/TestResults
      displayName: 'Run Tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/TestResults/*.trx'
        mergeTestResults: true
        testRunTitle: 'Azure Function Tests'
      displayName: 'Publish test results'
      condition: succeededOrFailed()

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Function to Azure'
    steps:
    - download: current
      artifact: drop
      displayName: 'Download build artifacts'
    
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '$(azureSubscription)'  # Replace with your Azure service connection name
        appName: '$(functionAppName)'
        package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
        appSettings: '-FUNCTIONS_WORKER_RUNTIME dotnet-isolated'
      displayName: 'Deploy to Azure Function App' 